{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "X",
    "scopeName": "source.x",
    "patterns": [
        {
            "include": "#root"
        }
    ],
    "repository": {
        "root": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#import-decls"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#constants"
                }
            ]
        },
        "import-decls": {
            "begin": "(import)\\s+",
            "end": ";",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.x"
                }
            },
            "patterns": [
                {
                    "match": "\\b(root|this)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.other.x"
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.x",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.x",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.x",
                    "match": "\\bdo\\w*!|\\b(if|then|else|match|while|for|break|continue|return|do)\\b"
                },
                {
                    "name": "keyword.control.exception.swift",
                    "match": "\\b(?:catch|throw|try)\\b"
                },
                {
                    "name": "storage.type.x",
                     "match": "\\b(void|never|bool|int|uint|isize|usize|float|string|char|self|mut|once)\\b"
                },
                {
                    "name": "storage.type.x",
                    "match": "\\b(func|type|class|enum|trait|impl)\\b"
                },
                {
                    "name": "storage.modifier.x",
                    "match": "\\b(public|internal|private|static|const|partial|lazy|ref|auto)\\b"
                },
                {
                    "name": "keyword.operator.x",
                    "match": "\\b(some|as|is|in|shl|shl_eq|shr|shr_eq|cmp)\\b"
                },
                {
                    "name": "keyword.operator.x",
                    "match": "[-~!%^&*|+=/?<>.+]+"
                },
                {
                    "name": "variable.language.x",
                    "match": "\\b(this|$([0-9]+|[\\p{XID_Start}][\\p{XID_Continue}]*)?)\\b"
                },
                {
                    "name": "storage.type.function.x",
                    "match": "\\b(init|deinit|get|set|willSet|didSet)\\b"
                },
                {
                    "match": "\\b(?:(operator)(?: (prefix|suffix|infix))?)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.other.x"
                        },
                        "2": {
                            "name": "keyword.other.x"
                        }
                    }
                },
                {
                    "name": "keyword.other.x",
                    "match": "\\b(let|import|module|macro|dyn|infer|__[a-z]+|\\[|\\]|[(){}:;,])\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.x",
                    "match": "\\b([\\p{XID_Start}][\\p{XID_Continue}]*)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.x",
                    "match": "\\b(true|false|nil)\\b"
                },
                {
                    "comment": "hexadecimal literals",
                    "name": "constant.numeric.x",
                    "match": "0x([0-9a-fA-F]('?[0-9a-fA-F])*)(\\.[0-9a-fA-F]('?[0-9a-fA-F])*)?([pP][+-]?[0-9]+)?(_?[\\p{XID_Start}][\\p{XID_Continue}]*)?"
                },
                {
                    "comment": "binary literals",
                    "name": "constant.numeric.x",
                    "match": "0b([01]('?[01])*)(_?[\\p{XID_Start}][\\p{XID_Continue}]*)?"
                },
                {
                    "comment": "decimal literals",
                    "name": "constant.numeric.x",
                    "match": "([0-9]('?[0-9])*)(\\.[0-9]('?[0-9])*)?([eE][+-]?[0-9]+)?(_?[\\p{XID_Start}][\\p{XID_Continue}]*)?"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#char-symbols"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.x",
            "begin": "\"",
            "end": "\"(?:_?[\\p{XID_Start}][\\p{XID_Continue}]*)?",
            "patterns": [
                {
                    "name": "constant.character.escape.x",
                    "match": "\\\\[0'\"\\abfnrtv]"
                },
                {
                    "contentName": "source.x",
                    "name": "meta.embedded.line.x",
                    "begin": "\\\\\\(",
                    "end": "(\\))",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.begin.x"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.end.x"
                        },
                        "1": {
                            "name": "source.x"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "comment": "Nested parens",
                            "begin": "\\(",
                            "end": "\\)"
                        }
                    ]
                },
                {
                    "name": "illegal.unknown-escape.x",
                    "match": "\\\\."
                }
            ]
        },
        "char-symbols": {
            "patterns": [
                {
                    "name": "string.quoted.single.x",
                    "match": "'(?:\\\\u\\{[^}]*\\}|\\\\.|.)'"
                },
                {
                    "name": "constant.symbol.x",
                    "match": "'[\\p{XID_Start}][\\p{XID_Continue}]*"
                },
                {
                    "name": "keyword.operator.x",
                    "match": "'[-~!%^&*|+=/?<>.+]*"
                }
            ]
        }
    }
}